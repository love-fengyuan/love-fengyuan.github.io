{"meta":{"title":"永远在路上 生命不息 学习不止","subtitle":"请道上大佬，多多指教","description":null,"author":"YuanFeng","url":"http://www.baidu.com","root":"/"},"pages":[{"title":"achives","date":"2019-03-10T00:54:40.000Z","updated":"2019-05-01T15:31:29.938Z","comments":true,"path":"achives/index.html","permalink":"http://www.baidu.com/achives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-05-01T21:24:47.000Z","updated":"2019-05-01T15:06:01.430Z","comments":true,"path":"categories/index.html","permalink":"http://www.baidu.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-01T21:24:27.000Z","updated":"2019-05-01T15:04:59.023Z","comments":true,"path":"tags/index.html","permalink":"http://www.baidu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"alleowj","slug":"test","date":"2019-05-01T19:50:35.879Z","updated":"2019-05-01T20:35:44.535Z","comments":true,"path":"2019/05/02/test/","link":"","permalink":"http://www.baidu.com/2019/05/02/test/","excerpt":"","text":"test k8sss k8sss dockerhjklsdsdahkjfghsfhjkdfhgsdjaklhfsfhjaklfh","categories":[{"name":"kubernetes","slug":"kubernetes","permalink":"http://www.baidu.com/categories/kubernetes/"}],"tags":[{"name":"hello","slug":"hello","permalink":"http://www.baidu.com/tags/hello/"},{"name":"test","slug":"test","permalink":"http://www.baidu.com/tags/test/"}],"author":"yuangeng"},{"title":"LVS","slug":"LVS_magedu","date":"2019-05-01T10:11:04.731Z","updated":"2019-05-01T10:35:36.155Z","comments":true,"path":"2019/05/01/LVS_magedu/","link":"","permalink":"http://www.baidu.com/2019/05/01/LVS_magedu/","excerpt":"","text":"LVSLVS(linux virtual server)即linux虚拟服务器，是一个虚拟的服务器集群系统。 使用集群技术和Linux操作系统实现一个高性能,高可用的服务器,很好的可伸缩性(scalability),很好的可靠性(reliability),很好的可管理性(manageability). contos7: grep -i ipvs /boot/config-3.10.0-693.e17.x86_64 grep -i ipvs -C 10 /boot/config-3.10.0-693.e17.x86_64 yum install ipvsadm rpm -ql ipvsadm curl命令 lvs服务器:需要两块网卡 启用Ipforward：echo net.ipv4.ip_forward=1 &gt;&gt; /etc/sysctl.conf sysctl -psysctl -a | grep ip_forward iptables -vnl client：需要桥接 RS1：设置网关yum install httpdecho RS1 &gt; /var/www/html/index.html RS2；设置网关yum install httpdecho RS2 &gt; /var/www/html/index.html LVS： 定义ipvs规则:NAt模式 yum install ipvsadm ipvsadm -A -t 172.20.0.200:80 -s rr ipvsadm -Ln ipvsadm -a -t 172.20.0.200:80 -r 192.168.80.17 -m ipvsadm -a -t 172.20.0.200:80 -r 192.168.80.27 -m ipvsadm -Ln 参考http://blog.sina.com.cn/s/blog_6786545e0102vjvq.html 并发4百万 apache 1万 LVS集群Cluster概念 系统扩展方式： scale up: 向上扩展，增强 scale out: 向外扩展，增加设备，调度分配问题， cluster Cluster: 集群，未解决某个特定问题将多台计算机组合起来形成的单个系统 Linux Cluster类型： LB：load blancing, 负载均衡 HA：high availiablity, 高可用， spof(single point of failure) MTBF: Mean Time Between Failure 平均无故障时间 MTTR: Mean Time To REStoration (repair) 平均恢复前时间（故障时间） A=MTBF/(MTBF+MTTR) (0,1): 99%,99.5%, 99.9%, 99.99%, 99.999% HPC: high-performance computing . 高性能 www.top500.org 分布式系统：分布式存储： 云盘 分布式计算： hadoop, spark Cluster分类 LB Cluster的实现 硬件：F5 big-ip citrix netscaler A10 A10 软件:lvs: linux virtual server nginx: 支持七层调度 haproxy: 支持七层调度 ats: apache trafficserver perlbal: perl编写 pound 基于工作的协议层划分： 传输层（通用）：DPORT LVS： nginx：stream haproxy: mode tcp 应用层（专用）：针对特定协议，自定义的请求模型分类 proxy server： http:nginx, httpdm haproxy(mode http),... fastcgi: nginx, httpd, ... mysql: mysql-proxy,... 会话保持：负载均衡 （1）session sticky: 同一用户调度固定服务器 source ip: lvs sh算法（对某一特定服务而言） cookie （2）session replication: 每台服务器拥有全部session session multicast cluster （3）session server: 专门的session服务器 memcached， redis HA集群实现方案 keepalived: vrrp协议 ais：应用接口规范heartbeat cman + rgmanager(RHCS) coresync_pacemaker LVS介绍LVS介绍 LVS: linux virtual server, 负载调度器，集成内核 官网：http://www.linuxvirtualserver.org/ VS：virtual server，负责调度 RS：real server,负责真正提供服务 L4：四层路由器或交换机 工作原理：vs根据请求报文的目标ip和目标协议及端口将其调度转发至某RS，根据调度算法来挑选RS iptables/netfilter: iptables:用户空间的管理工具 netfilter:内核空间上的框架 流入：PREROUTING–&gt;INPUT 流出：OUTPUT–&gt; POSTROUTING 转发：PREROUTING–&gt;FORWARD–&gt;POSTROUTING DNAT：目标地址转换；PREROUTING LVS概念 lvs集群类型中的术语： VS：virtual server, director server(DS) dispatcher(调度器)，load balancer RS:real server(lvs), upstream server(nginx) backend server(haproxy) CIP:client ip VIP:virtual serve ip VS外网的ip DIP:director ip VS内网Ip RIP:real server ip 访问流程：CIPVIP==DIPRIP LVS集群的类型 lvs: ipvsadm/ipvs ipvsadm: 用户空间的命令行工具，规则管理器 ipvs: 工作于内核空间netfilter的INPUT钩子上的框架 lvs集群的类型： lvs-nat: 修改请求报文的目标IP，多目标IP的DNAT lvs-dr: 操纵封装新的MAC地址 lvs-tun: 在原请求IP报文之外新加一个IP首部 lvs-fullnat: 修改请求报文的源和目标IP lvs-nat模式 lvs-nat: 本质是多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为某挑出的RS的RIP和PORT实现转发 (1)RIP和DIP应在同一个IP网络，且应使用私网地址，RS的网关要指向DIP (2)请求报文和响应报文都必须经由Director转发，Director易于成为系统瓶颈 (3)支持端口映射，可修改请求报文的目标PORT (4)VS必须是linux系统，RS可以是任意OS系统 lvs-fullnat模式 lvs-fullnat: 通过同时修改请求报文的源IP地址和目标IP地址进行转发CIP--&gt;DIP VIP--&gt;RIP (1)VIP是公网地址，RIP和DIP是私网地址，且通常不在同一IP网络；因此。RIP的网关一般不会指向DIP (2)RS收到的请求报文源地址是DIP，因此，只需响应给DIP；但Director还要将其发往Client (3)请求和响应报文都经由Director (4)支持端口映射 注意：此类型kernel默认不支持 LVS工作模式总结 VS/NAT VS/TUN VS/DR server any tunneling non-arp device server network private LAN/WAN LAN server number low(10~20) high(100) high(100) server gateway load balancer own router own router lvs-nat与lvs-fullnat:请求和响应报文都经由director lvs-nat:RIP的网关要指向DIP lvs-fullnat：RIP和DIP未必在同一IP网络，但要能通信 lvs-dr与lvs-tun:请求报文要经由director，但相应报文有RS直接发往client lvs-dr：通过封装新的MAC首部实现，通过MAC网络转发 lvs-tun: 通过在院IP报文外封装新IP头实现转发，支持远距离通信ipvs scheduler ipvs scheduler: 根据其调度时是否考虑各RS当前的负载状态 两种：静态方法和动态方法 静态方法：仅根据算法本身进行调度 1. RR: roundrobin,轮询 2. WRR: weighted RR,加权轮询 3. SH: source hashing,实现session sticky，源IP地址hash；将来自同一个IP地址的请求，始终发往第一次挑中的RS，从而实现会话绑定 4. DH: destination hashing, 目标地址哈希，将发往同一个目标地址的骑牛始终发至第一次挑中的RS，典型使用场景是正向代理缓存场景中的负载均衡；如：宽带运行商 动态方法： 主要根据每个RS当前的负载状态及调度算法进行调度overhead=value较小的RS将被调度 LC: least connections 适用于长连接应用 overhead=activeconns*256+inactiveconns WLC: weighted LC,默认调度方法 overhead=(acticeconns*256+inactiveconns)/weight SED: shortest expection delay,初始连接高权重优先 overhead=(activeconns+1)*256/weight NQ: never queue, 第一轮均匀分配，后续sed LBLC: locality-based LC，动态的DH算法，使用场景：根据负载状态实现正向代理 LBLCR: LBLC with replication, 带复制功能的LBLC，解决LBLC负载不均衡问题，从负载重的复制到负载轻的RS ipvsadm命令 ipvsadm 命令： 核心功能： 集群服务管理：增，删，改 集群服务的RS管理：增，删，改 查看 ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [–pe persistence_engine] [-b sched-flags] ipvsadm -D -t|u|f service-address 删除 ipvsadm -C 清空 ipvsadm -R 重载 ipvsadm -S [-n] 保存 ipvsadm -a|e -t|u|f service-address -r server-address [options] ipvsadm -d -t|u|f service-address -r server-address ipvsadm -L|l [options] ipvsadm -Z [-t|U|f service-address] 管理集群上的RS：增，删，改 增、改：ipvsadm -a|e -t|u|f service-address -r server-address [-g|i|m] [-w weight] 删：ipvsadm -d -t|u|f service-address -r server-address server-addres: rip[:port] 如省略port，不作端口映射 选项： lvs类型:-g: gateway, dr类型，默认 -i: ipip，tun类型 -m: masquerade, nat类型 -w weight: 权重 LVS实现ldirectord","categories":[{"name":"lvs","slug":"lvs","permalink":"http://www.baidu.com/categories/lvs/"}],"tags":[{"name":"lvs","slug":"lvs","permalink":"http://www.baidu.com/tags/lvs/"}],"author":"yuangeng"},{"title":"大纲","slug":"DG_dagang_mage","date":"2019-05-01T10:11:04.718Z","updated":"2019-05-01T14:52:07.789Z","comments":true,"path":"2019/05/01/DG_dagang_mage/","link":"","permalink":"http://www.baidu.com/2019/05/01/DG_dagang_mage/","excerpt":"","text":"马哥教育高级Linux云计算2018课程阶段模块1、企业级Linux系统工程师课程（30天）1、Linux运维最佳学习方法”5W1H”六何分析法全面介绍，独家Linux快速入门学习技巧2、冯诺依曼体系（CPU架构、操作系统概念、发展演变、应用场景、业内形态）3、Linux运维基础实战入门，用户管理，权限，文件查找，文本编辑及实战讲解4、Linux运维系统管理和技能进阶，磁盘管理，软件安装，文件系统、内核使用方法和高级技巧5、Linux系统环境及日常管理，结合日常工作常用20个场景，排错思路、面试和工作中注意事项6、以实战方式全方位展示Bash八大特性和高级用法介绍以及高级企业级使用技巧实战演练7、Shell脚本工作原理、学习方法、配罝技巧、企业级书写规范、开发环境定制全面实战介绍8、职场人价值体系-知识、技能、成长目标和方向定位年薪30W运维人员必备知识体系关键技能点 2、Linux应用运维工程师&amp;DBA（30天）1、TCP/IP网络通信协议，IP地址含义、TCP有限状态机转换原理，路由协议2、利用Kickstart文件实现企业级自动化安装环境定制，百台并发安装实战3、Linux常见系统故障案例分析，企业级Linux运维工程师常犯错误Top54、全面讲解CDN核心技术理念，实现智能DNS流量分发和用户策略引导5、实战讲解LAMP运维架构，Apache+PHP+Mysql架构体系和文件存储6、介绍企业级安全体系，iptables构建安全架构以及软硬防火墙优劣势7、深入讲解运维必备Web服务开源解决方案Nginx及LNMP企业高级用法8、企业级DBA实战课程，Mysql企业级实战应用，调优及redis企业级应用 3、企业级Linux云计算工程师（24天）1、全面讲解企业级LNMP架构及12条策略建议，实现互联网电子商务、博客、论坛等实战案例2、专业压测评估体系，从并发、响应时间、持久连接、pv、峰值、带宽，以及ab等压测方案实施4、讲解Linux Cluster集群，全面分析集群类别，讲解F5和LVS、haproxy、nginx的4-7层负载均衡5、实战带领在Centos7上实现LVS集群配罝、服务管理、调度算法修改、后端服务器上下线、服务状态监控，状态监测方实现NAT、DR、TUN等模型演练6、全面实现基于Nginx负载均衡功能，实现Nginx反代后端、Nginx负载均衡实现网站动静分离详解7、实战带领实现Keepalived主从架构及双主切换方案、报警定制、日志分析等8、全面讲解Zabbix3.X监控特性、Web服务监控、Zabbix内部监控、Zabbix特性及功能详解9、全面讲解Varnish缓存技术，深入Varnish工作机制、核心架构、及主流开源缓存技术解决方案10、laaS、PaaS和SaaS云平台功能及常见实现方式及OpenStack的功能特性及其实现的增强功能11、全面讲解KVM虚拟化技术，docker技术实现互联网容器和Docker容器云以及Kubemetes管理 4、Linux自动化工程师&amp;Devops（20天）1、以自动化运维框架为主线，讲解Devops运维自动化趋和核心技术2、自动化运维工具Puppet、Ansible、Cobbler、Saltstack、 Fabric对比3、Ansible生产环境应用案例和实战操练、批量进行上百台服务器管理4、企业自动化工具Puppet使用场景，实现搭建企业运维自动化平台架构5、全面讲解Git版本控制、脚本自动化管理、Git分支合并，Git服务器搭建6、深入讲解基于Shell脚本企业级高级用法和常见实现Shell自动化管理7、python基本语法和自动化工具应用，及开源跳板机Jumpserver实现8、实战：基于生产环境持续集成案例，Jenkins+gitlab+maven+shell实现代码自动化上线部署，可持续集成9、生产环境基于自动化运维常见场景如自动化发布、灰度发布、批量上线、降级方案、无缝切换等核心技术 5、Linux系统架构师&amp;运维架构师（16天）1、全面介绍缓存技术要点，讲解数据流式化、代理式缓存、旁路式缓存、缓存算法、缓存设定策略、一致性哈希算法优劣势等2、全面讲解正向代理、反向代理机制，实战实现Nginx反向代理负载均衡，跳转规則实现动静分离、IP曰志记录、头部信息改写、缓存模块、缓存策略、请求超时机制、健康状态监测、判定规则、状态码定义、实现后端故障及自动上线等能力3、实战带领实现千万级大型互联网Web架构核心技术，运用LVS、Haproxy、Vamish、 Nginx、tomcat、MySQL等实现高并发运维体系Web架构，实现分布式集群存储Fastdfs和mogileFS架构4、全面讲解MySQL—主多从、一从多主企业级用法，深入讲解MySQL读写分离、连接池及sharding技术，以及MMM、MHA、Galera-Cluster核心技术， MySQL读写分离Amoeba实现5、实战:分布式收集Nginx日志于Elk集群，并通过Kibana展示；实战:分布式收集 JAVA日志于Elk集群，并通过Kibana展示；实战:分布式收集Syslog曰志于Elk集群，并通过Kibana展示6、结合自动化工具实现企业业务服务管理，持续化集成，实现Devops运维管理模型及架构设计。7、实现基于k8s的企业级容器云架构管理，以及docker容器的服务应用，实现私有云架构方案8、全面讲解大众点评、美团、滴滴、饿了么等亿级别PV大型互联网架构方案，以及设计规范，包含负载均衡、缓存、高可用、数据库、分布式存储、消息队列、自动化、运维规范、监控体系等 6、独家秘笈:高薪就业全方位指导（10天）1、以高级运维工程师运维日常工作内容全面介绍工作场景和岗位职责2、从简历格式，技能描述，项目案例，个人优势360°打造精致个人简历3、国内4大招聘网站简历上传，投递，工作岗位筛选和黄金岗位识别技巧4、简历投递时间节点，简历邮件标题，开场白书写规范和技巧5、专业面试官讲解面试前、面试中、面试后和工作中注意事项6、全面讲解技术面试和人事面试的侧重点以及面试回答方向和方法7、从着装、自我介绍、职业发展、薪资谈判等全方面培养面试综合能力8、全面讲解创业型公司、传统企业、互联网公司的工作环境和技术架构9、讲解薪资和股票期权抉择，以及未来技术发展趋势，和就业公司选择10、按照企业面试官标准 ，进行一对一的技术面试和人事面试指导11、针对学员面试中常见的技术问题，企业教练进行专业辅导12、针对学员情况，讲解未来5年的职业发展和个人成长规划13、毕业后可加入价值12800元的马哥教育往期智囊团和高端人脉圈14、终身享受马哥教育高端独家业内高薪就业机会推荐 课程安排 授课内容和技术要点 实操案例和实战项目 第1-2天（网络班1-64天为就业班内容，65-120天为架构师班内容）1、课程体系大纲介绍：linux基础服务和安全、Linux集群、Linux运维工具、架构师、MySQL DBA、虚拟化技术、容器技术、大数据云计算等2、Linux运维最佳学习方法5W1H六何分析法全面介绍3、利用艾宾浩斯记忆法激发主动学习最佳实践方针4、职场人价值体系-知识、技能、能力成长目标和方向定位5、年薪30W运维人员必备知识体系以及关键技能点6、冯诺依曼体系、CPU架构、操作系统概念、发展演变、应用场景、业内形态全面介绍&amp; GNU/GPL协议规范介绍、泛Linux运维开源领域体系介绍7、Linux系统起源、使用场景、版本差异、Linux系统印Unix系统区别及适用场景8.互联网和传统企业IT架构设计起初Linux系统种类选择，版本选型核心要素介绍9、Linux操作系统的发展历史；常见的开源协议10、Linux内核的功能介绍：驱动程序、内存管理、进程管理、安全管理、网络功能、文件系统11、Linux发行商和常见发行版、Linux的发行版详解、Redhat和Centos区别12、虚拟化学习环境介绍：Vmware、Virtuabox等Linux学习环境入门 • 实战项目 1: 完成上课环境虚拟化搭建熟练掌握教室文件服务系统使用掌握Linux工程师未来职业发展方向• 实战项目 2: 通过Vmware实现Linux系统安装部署• 实战项目 3: 实操掌握使用Vmware对安装的Linux虚拟机进行备份、快照、还原、迁移等进阶管理操作 第3-4天1、Linux哲学思想、文件系统层级结构、家目录、工作目录、命名规范全面讲解2、Linux命令格式、可执行命令与windows区别、命令用法介绍3、如何高效获取命令帮助信息、工作中如何快速获取高效帮助说明和文档4、常见命令 file、echo、cat、date等用法以及运维工作中高级进阶用法讲解5、人机交互接口shell介绍：GUI（图形界面） and CLI（命令行界面）6、数据结构的常见组织方式：key/value、树状结构、图状结构、链式结构（环链、单链、双向链表、循环链表）7、Linux终端分类：物理终端、虚拟终端、图形终端、串行终端、伪终端介绍8、命令提示符“[root@localhost ~]”各字段说明和个性化定制9、Xshell企业级远程终端使用以及生产环境中注意事项10、Linux文件系统文件路径表示以及路径快速切换技巧11、命令的通用语法格式以及速记技巧12、命令帮助获取man手册详解和如何掌握自我获取帮助信息指南13、Linux常用命令详解，以及各命令的进阶用法• 实战项目 1: 通过Linux基础常用命令，完成Linux系统时钟修改掌握Linux平台各终端的特点熟练掌握Linux命令的基本格式• 实战项目 2: 实战掌握Xshell远程管理Linux系统和企业中的注意事项• 实战项目 3: 对用户命令提示符进行个性化定制 第5-6天1、Linux的文件系统层级结构标准介绍，以及文件系统与内核关系2、Linux系统上文件的类型如ext4、ext3、及常见目录树状的结构模型3、bash的基础特性之命令补全和路径补全：Tab键用法及生产环境高效命令使用技巧4、bash特性之命令别名alias、命令历史history、shell快捷键详解5、bash的基础特性之命令行展开{}、命令的执行状态、glob通配符及常用字符集合表示等特殊符号详解和实战用法6、目录管理类命令：mkdir, rmdir，tree的使用详解及实战用法7、bash中的强引用、弱引用、命令引用详解，以及实战用法8、文件常用查看命令cat, tac, more, less, head, tail等命令精讲9、文件时间戳atime、ctime、mtime精讲以及工作中的应用常见10、文件管理工具：cp, mv, rm及单源复制和多源复制和进阶技巧11、bash特性之变量：本地变量、环境变量、局部变量、位置参数变量以及生产环境设置方式和技巧• 实战项目 1:以实战方式讲解管道结合重定向进行文本内容定向输出，以及管道的搞常见用法和技巧• 实战项目 2: 企业常见目录管理和一条命令创建多级多目录创建方法技巧• 实战项目 3: 使用cp和mv命令组合完成上多个小文件的多源复制和转移第7-8天 1、以实战方式全方位展示Bash八大特性–Globbing、环境变量、特殊变量、管道、重定向、命令展开、路径补全、命令引用，并讲解其常见用法和高级技巧2、全方位介绍Linux用户管理、用户类型、认证机制、用户密码加密机制、安全上下文、用户相关配罝文件、用户和组管理命令。（实战项目:如何用高级技巧，创建一个企业级用户）3、Linux系统权限、权限组合机制、权限管理、授权方式和特殊权限位多种生产实战用法介绍4、进程安全上下文及用户和权限管理模型精讲，企业系统权限安全加固5、用户管理命令useradd, usermod, userdel及解析库文件/etc/passwd精讲，生产环境用户管理方式和认证机制6、常见的单向加密算法md5、sha1、sha224及随机数产生和加密原理• 实战项目 1: 实战演练为系统添加常用管理用户，以及设置其权限进行安全加固掌握Linux用户和权限以及bash特性掌握Linux文本编辑器和常见使用技巧• 实战项目 2: 手动通过编辑配置文件，创建Linux用户，深入掌握Linux用户和权限机制• 实战项目 3: 实战操练Linux多功能快捷键使用技巧和工作中常见用法组合第9-10天1、Linux文件权限rwx及文件属性讲解和Linux文件权限表示法：赋权表示、授权表示、数值表示法深入讲解2、Linux文件权限管理命令：chmod、chown、chgrp实战使用技巧3、Linux默认权限umask、隐藏属性chattr、lsattr高级进阶4、Shell脚本编程思想核心要素:逻辑组合、状态码、运算数、“与或非”逻辑位深度讲解5、Shell脚本工作原理、学习方法、配罝技巧、企业级书写规范、开发环境定制等全面实战介绍6、bash脚本编程配置文件profile类、bashrc类、以及logout类文件详解7、国内最详细的正则表达式及扩展正则表达式深度精讲8、文本搜索工具：grep, egrep, fgrep使用技巧以及生产环境常见用法9、文本查看及处理工具wc, cut, sort, uniq, diff, patch详解结合企业生产环境场景如从日志中取出访问top20的IP等组合使用技巧10、正则表达式与Grep命令结合，展示运维生产环境常见问题处理方式（实战项目：匹配非法用户，匹配攻击者ip、找出系统资源配 置监控项等）• 实战项目 1:实战操练使用数值、赋权表示等多方式对文件和文件夹进行快速授权技巧• 实战项目 2: 定制属于自己的个性shell脚本初始化工具• 实战项目 3: 结合正则表达式对用户账号信息内容进行快速抓取和匹配获取 第11-12天1、vim编辑:vim的三种模式之命令模式、编辑模式、末行模式之间的切换，以及快捷键的使用2、vim进阶：可视化模式、文件查找、多窗口模式，文本编辑神器Vi、Vim、Nano企业级实战用法以及高级使用技巧全面揭秘3、bash脚本编程之算术运算let VAR=算术表达式、VAR=$[算术表达式]、VAR=$((算术表达式))、VAR=$(expr $ARG1 $OP $ARG2)4、文件查找非实时查找locate命令讲解以及企业常见用法5、文件实时查找find命令查找条件：-name、-iname、-regex、-user、-group、-nouser、-type、-size、-perm，处理动作-print、-ls、-delete、-f 、-ok 、-exe及xargs命令的学习，以及结合生产环境常见文件快速查找用法6、特殊权限SUID、SGID、SBIT和facl文件访问控制命令讲解• 实战项目 1:用vim实战高效编辑常用配置文件以及生产环境使用技巧• 实战项目 2: 通过Shell脚本快速管理目录权限实战操作• 实战项目 3: 使用find命令快速查找配置文件、日志文件高级技巧 第13-14天1、linux磁盘管理之硬盘结构及分区基础，Linux磁盘组成、工作原理、内核加栽方式、磁盘管理和使用方式，企业标准化分区案例展示磁盘I0读写原理，数据存储原理、分布式存储系统槪念介绍、 生产环境误操作删除文件径救方案揭秘2、磁盘分区管理命令fdisk与常用命令n、d、t、l、w、q、m、p的使用3、文件系统组织原理和常见的虚拟文件系统ext系列、iso9660、nfs、vfat、swap、btreefs4、文件系统创建mkfs、mke2fs与管理工具fsck、dumpe2fs, tune2fs、e2label、blkid详解5、链接文件的创建ln [-s]及符号链接与硬链接区别精讲及企业级用法6、swap分区的创建mkswap，启用swapon和禁用swapoff，以及工作使用场景介绍7、挂载mount及挂载选项和umount, fuser, lsof命令的使用8、开机挂载及/etc/fstab文件及du、df命令的详解 第15-16天1、Bash Shell脚本基础入门和算术运算进阶2、Shell编程之条件判断三种方式：test EXPRESSION [ EXPRESSION ]3、Shell编程的三种测试类型：数值测试、字符串测试、文件测试及组合条件，shell编程的状态返回值$？及参数传递$1、$2以及实现用户交互4、常用级别：RAID-0, RAID-1, RAID-5, RAID-10, RAID-50相关概念详解，全面介绍廉价磁盘冗余阵列RAID的优势，级别，实现方式和企业常用解决方案以及不同生产环境的实践运用5、Centos7结合内核中的mdadm工具实现RAID软RAID管理，mdadm创建模式、管理模式、及watch命令的用法6、LVM2原理及相关概念详解，LVM逻辑卷原理、运行机制、实现命令管理全面介绍，实战演练磁盘动态伸缩，逻辑卷快照技术深入讲解，企业级快照备份策略以及实现方式介绍7、Lvm2软件创建管理工具pv工具：pvdisplay、pvcreate、pvmove、vgvreate；vg工具：vgextend、vgreducevgremove及lv工具：lvs、lvcreate、lvremove快照snapshot管理在线备份详解8、数据库备份：冷备份、温备份、热备份及快照卷的写时复制（COW）• 实战项目 1:利用Shell脚本实现用户交互式管理，可用Shell实现自定义目录创建• 实战项目 2: 动手实现RAID1-5的配置以及RAID1的数据恢复和还原• 实战项目 3: 使用LVM实现逻辑卷的以及磁盘动态伸缩，通过Snapshot实现数据备份和还原操作 第17-18天1、Linux常见压缩工具gzip、bzip、xz使用介绍，并进行性能对比演示，归档压缩神器tar工具使用技巧讲解，实现配置文件以及核心文件打包备份策略2、Linux程序包管理器基础及程序包的组成以及企业常见管理方式，全面介绍Debian、Redhat、Suse、Gentoo、Ubuntu等Linux系统软件包管理方式，并着重讲解Linux软件包构成、软件包版本选择、包管理器使用方法、 企业中软件包获取方3、RPM包管理器常用命令rpm命令的安装-i、升级-U、卸载-e、查询-q、校验-V、与数据库维护–builddb全解，企业标准讲解rpm包查询、安装、升级、卸载、校验、数据库维护使用方法4、RPM管理的高级应用工具yum介绍，常见的yum仓库配置与使用，管理全面介绍YUM软件包仓库工作机制、管理方法、使用技巧、企业级配罝5、YUM命令的用法安装install、升级update、卸载remove、缓存构建makecache、包组管理groupinstall、groupupdate grouplist 、groupremove 、 groupinfo6、自建YUM源，Createrepo工具的使用使用光盘当作本地YUM仓库：自建YUM仓库7、程序包源码编译安装三步走：./configure、make、make install，码编译安装包原理，以及编译准备工作、配罝选型定制和编译安装8、源码安装后的配置：环境变量、库文件、头文件、及帮助文件的导出• 实战项目 1:使用常见压缩工具，对比对配置文件和核心系统文件进行压缩测试• 实战项目 2: 使用YUM对系统常用软件进行安装、升级，以及手动自创建YUM仓库• 实战项目 3: 源码编译安装系统性能检测工具–dstat 第19-20天1、Shell脚本编程选择执行之if语句：单分支，多分支详解及示例2、Shell编程之循环执行之for语句详解与示例3、流编辑器sed工作原理：保持空间、工作车间、模式空间讲解4、sed命令常用选项-n、-e、-f、-r、-i讲解与示例演示，以及生产环境使用技巧5、sed命令地址定界：空地址、单地址、地址范围、步进表示法6、sed命令常用的编辑命令d、p、a、i、c、w、r、=、！s///讲解与示例分析7、sed命令高级编辑命令模式空间与保持空间内容交替：H、h、G、g、x、N、n、8、Linux任务计划at命令和周期性任务执行crontab命令讲解，Crontab实现生产环境夜间核心配文件打包备份策略• 实战项目 1: 使用Shell脚本if判断实现企业备份脚本编写• 实战项目 2: 使用Sed命令，实现文本内容非交互式快速修改• 实战项目 3: 实战实现Crontab+Tar企业级生产环境配置文件一键式打包备份策略 第21-22天1、TCP/IP网络基础：OSI七层模型： 物理层、数据链路层、网络层、传输层、会话层、表示层和应用层介绍2、Linux网络属性配置之资源子网，网络设备概念MAC、网桥、交换机工作原理的讲解3、IP地址的组成：网络号+主机号与ip地址分类：A类：第一段为网络号，后三段为主机号；B类：前两段为网络号，后两段为主机号；C类：前三段为网络号，最后一段为主机号；D类：组播；4、路由分类：网络路由、主机路由、默认路由详解，子网掩码、网关、路由5、网络管理相关命令ifconfig、route、netstat命令讲解6、iproute家族ip link、ip netns、ip address 、ip route、命令详解7、全面讲解TCP/IP网络通信协议，IP地址含义、TCP有限状态机转换原理、IP地址分类、网桥、网卡工作原理、路由器工作原理、OSI开放系统互联7层模型介绍，Linux 网络屈性实战配置演练及Linux常用网络工具curl、wget、netstat、ifconfig、 ip、dig、nmap、ping等使用方法和技巧。（含金置不亚于专业CCNA课程） 第23-24天 1、Linux进程管理基础：父进程fork自身产生子进程2、进程的优先级0-139，以及优先级具体应用策略3、同一主机进程通信方式和不同主机通信方式4、进程的类型：守护进程和前台进程；与状态：running、ready、sleeping、zombie、stopped及分类5、Linux进程管理工具ps、pgrep, pkill、pgrep, pkill、uptime、top、htop、vmstat、glances详解6、Linux作业控制jobs、fg、bg、kill及进程优先级nice值调整7、Linux系统进程管理，进程工作状态切换方式，进程优先级作用，进程调优方向全面讲解；内存、CPU、网络、磁盘等核心资源监控相关管理讲解，全面介 绍新时代运维三板斧ss、htop、dstat使用方法和高级技巧（腾讯公司运维一线核心指标观察经验）• 实战项目 1:结合生产环境应用，观察内存、CPU、网络、磁盘等核心指标，并进行记录和优化• 实战项目 2: 手动调整进程优先级，观察进程的资源消耗情况，以及异常进程杀死等操作• 实战项目 3: 使用新时代运维三板斧ss、htop、dstat对系统性能进行检测和记录 第25-26天 1、Linux操作系统的组成部分：内核+根文件系统2、运行中的linux系统环境介绍：内核空间+用户空间3、内核的设计流派及linux内核的特点：模块化、支持动态装卸载4、系统用户空间初始化详细流程精解、系统的运行7个启动级别讲解0关机、1单用户模式、2、多用户模式、3多用户模式、4预留级别、5多用户模式、6重启7、/etc/inittab文件详解及运行级别切换init，与查看who -r、runlevel5、系统初始化脚本：/etc/rc.d/rc.sysinit讲解6、（用户空间的启动流程）： /sbin/init (读取/etc/inittab来完成启动)设置默认运行级别 –&gt; 运行系统初始化脚本，完成系统初始化 –&gt; 关闭对应级别下需要停止的服务，启动对应级别下需要开启的服务—&gt; 设置登录终端 [–&gt;如果设置默认级别为5，则启动图形终端7、grub启动引导程序配置及命令行接口详解，grub配置/boot/grub/grub.conf详解，单用户模式及救援模式修复grub8、CentOS系统内核信息获取uname命令详解，模块管理基础命令：lsmod、modinfo、modprobe、depmod，ramdisk文件管理命令：mkinitrd、dracut9、常见的内核参数讲解net.ipv4.ip_forward：vm.drop_caches：cache 、kernel.hostname：net.ipv4.icmp_echo_ignore_all以及两个伪文件目录/proc、/sys详细讲解 第27-28天 1、CentOS系统内核编译定制，可实现内核裁剪优化以及性能定制2、CentOS安装程序anaconda详解，以及实现无人值守自动化安装策略3、CentOS远程安装kickstart文件制作与光盘镜像制作，实现自动化运维之系统定制化自动安装4、运维自动化系统篇：如何实现RHEL系列自动化批量部署环境搭建，实战演练利用Kickstart文件实现企业级自动化安装环境定制、安装盘的定制；十分钟完成上百台服务器同时定制化安装。（大众点评运维自动化安装实战案例介绍）5、Shell脚本编程之break、continue、跳出循环实例，Shell编程之while循环及for循环特殊用法示例，可实现高级自动化多服务器管理批量管理6、全面讲解cobbler自动化运维原理，深入讲解其使用场景和企业级用法cobbler实现自动化演示，批量进行上百台服务器并发快速安装案例• 实战项目 1:利用Shell脚本实现用户交互式管理，可用Shell实现自定义目录创建• 实战项目 2: 动手实现RAID1-5的配置以及RAID1的数据恢复和还原• 实战项目 3: 使用LVM实现逻辑卷的以及磁盘动态伸缩，通过Snapshot实现数据备份和还原操作 第29-30天 1、Shell编程选择执行之case语句详解，对比不同判断语句使用场景2、Shell服务脚本框架详解及示例，手动实现运维自动化Shell脚本制作3、Shell编程之function及函数的生命周期详解4、Shell编程之函数的递归与返回return传参，可实现模块化Shell脚本编程5、Centos7, Systemd新特性全面讲解，并介绍核心概念uni似及其关联配罝文件，与Centos6启动做对比说明，实战演练Systemctl使用方法和技巧，以及介 绍企业中用Centos7相关注意亊项，CentOS7新特性：systemd特性及新概念unit常见类型分析6、管理系统服务systemctl命令详解，systemcd运行级别管理target units，以及企业级快速管理技巧8、systemctl命令的常见用法：级别查看、切换、关机重启9、美国军工级别安全体系SELinux原理讲解，深入介绍进程安全上下文、Sand-box沙箱体系、安全标签定义，以及相关工具(如SEtenforce等)使用安全加强和LINUX（SELINUX）安全级别10、Selinux的配置文件/etc/sysconfig/selinux详解，Selinux的状态enforcing: 强制、permissive: 启用、disabled:；关闭使用chcon为文件打标• 实战项目 1:函数实现shell脚本删除当前目录下大小为0的文件• 实战项目 2: 对比CentOS7和CentOS6的特性，进行差异化启动脚本定制• 实战项目 3: 使用Selinux对系统进行安全加固全面讲解Shell脚本进阶技能，Shell脚本条件测试，if和case选择分支，以及for、while、until循环、continue和break控制循环机制。要求实现生产环境案例：（主机名如果为空，或者包含Localhost或者包含Linux,则将其设为 www.magedu.com) 第31-32天 1、Shell脚本数组定义、声明及引用方式的讲解2、Shell非稀疏数组及关联数组相关概念及基础讲解3、Shell脚本之字符串切片${var:offset:number}：基于模式取子串、查找替换、详解，可实现生产环境高级编程技巧4、bash编程之信号捕捉详解，Shell脚本面试场景八大军规5、文本格式化工具awk工作原理，以及企业常见用法讲解6、awk命令用法示例讲解，结合生产环境案例如日志排序等实战演练7、awk内建变量FS、OFS、RS、ORS、NF、NR、FILENAME、ARGC、ARGV使用示例讲解8、awk处理动作打印print与格式化打印printf命令详解，以及实战操练9、awk进阶之函数示例及讲解，可结合安全防护策略，用awk快速统计当前用户请求连接数实战演练• 实战项目 1: 使用Shell脚本结合ping命令，判断服务器是否存活• 实战项目 2: awk结合shell脚本实现快速统计当前用户请求连接数实战演练• 实战项目 3: awk结合shell脚本实现最近登录用户统计 第33-34天 1、进程通信方式：IPC，及socket，安全套接字层通信SSL基础2、加密的目的及预防攻击的解决方案（加密解密技术与安全认证服务）3、SSL/TLS加密传输的开源实现OpenSSL简介，互联网网络安全概述，树立安全意识、系统性能/安全、安全威胁模型和保护方法、系统服务访问控制及服务安全基础、Https协议加速优关键字段介绍、 Linux人证机制从入门到精通、针对一些常见的互联网攻击所采取的防护手段4、常见的加密算法对称加密、公钥加密、单向加密、密钥交换详解5、全面实现基于企业级Ssh安全服务体系，从端口认证、IP限制、访问速度控制、登陆模式基于密钥认证、安全加固手把手带领实现，进行生产环境案例讲解，基于ssh服务实现自动化管理模式6、PKI：公钥基础设施相关概念讲解：CA、RA、CRL以及互联网安全策略介绍7、传输层安全协议SSL全面介绍，详细介绍Http与SSL协议结合实现Https加密通信原理，从安全目标、攻击类型、加密、解密介绍互联网攻防知识体系，全面讲解加密算法、常见对称加密方法、非对称加密方法、公钥和私钥工作原理、数字证书和数字签名使用方法、CA中心工作机制；（实战项目：实现自建CA证书颁发中心过程，实现生产公私钥并颁发证书进行认证全过程） 第35-36天 1、基于套机字通信的C/S架构模型工作原理2、应用层协议DNS起源与发展，全面介绍DNS原理、树状架构、服务体系、域名分类、查询类型、互联网DNS规范、递归和迭代、安全加固等重点技能，并手把手带领实战主从架构、区域 传送、子域授权、智能DNS配罝和实现3、DNS服务迭代与递归查询原理4、DNS区域数据库文件资源记录A， AAAA， PTR， SOA， NS， CNAME， MX详解5、主-辅DNS服务器配置基础及相关概念详解6、bind程序的安装，使用DNS正向区域、反向区域与缓存dns的配置演示7、rndc、dig、host、nslookup工具使用8、bind的从DNS服务器的配置子域授权、及基于view的智能DNS实现9、bind中的基础安全相关的配置：访问控制列表（acl）、访问控制指令allow-query{}、allow-transfer {};allow-recursion {};、allow-update {}详解• 实战项目 1:实现www.magedu.com域名的DNS服务正反解析• 实战项目 2: 实现DNS服务主从架构以及工作场景安全加固• 实战项目 3: 实现基于View功能的智能DNS 第37-38天 1、IANA端口分配标准:特权端口：0-1023、注册端口：1024-41951 动态端口：41952+2、tcp协议进程通信原理3、tcp的有限状态机及其特性详解4、http文本协议及超文本标记语言简介5、结合生产环境模拟实现一次完整的http事务的处理流程全过程6、web资源组成动态资源、静态资源；7、并发访问响应模型单进程I/O模型、多进程I/O结构、复用的I/O结构、复用的多进程I/O结构8、httpd-2.2的安装及常用配置，以及企业生产环境配置9、httpd的特性：高度模块化、DOS、MPM10、http多路模块处理机制：prefork、worker、event详解 第39-40天1、http协议进阶之URL统一资源定位符详解2、request报文语法格式与response报文语法格式详解3、request报文之请求方法GET、HEAD、POST、PUT、DELETE、TRACE、OPTIONS详解4、response状态响应码1xx、2xx、3xx、4xx、5xx及常见得状态响应码详解5、httpd头部的分类通用首部、请求首部、响应首部、实体首部、扩展首部详解6、https概念及对应的模块mod_ssl应用配置7、httpd压力测试工具ab、及curl、elink、htpasswd命令详解8、httpd-2.4新特性及新模块mod_proxy、mod_proxy_scgi、modremoteip详解9、arp可移植运行环境介绍及httpd-2.4编译安装配置10、httpd虚拟主机、站点访问控制、基于用户的访问控制、持久连接、日志分析等应用配置实例精讲11、通用网关CGI标准简介、php语言、Zend Engine解释器、加速器相关概念介绍13、lamp基础应用入门（lamp+apache+php+mysql）14、LAMP（将php编译成httpd模块）架构实战虚拟主机安装wordpress, phpwind,discuz;• 实战项目 1:实现基于LAMP的小米官方电子商务网站架构，可抗上千并发架构设计• 实战项目 2: 通过压测工具，对网站进行压力测试并记录资源指标• 实战项目 3: 实现基于SSL加密的https安全会话通信服务 第41-42天1、LAMP快速部署及lamp组合深入讲解（lamp+apache+php-fpm+mysql）2、关系型数据库设计范式3、php-fpm主配置文件和环境配置文件详解4、通用二进制安装和使用mariadb5、maridb数据类型：字符型、数值型、日期时间型详解6、常见的SQL使用DML: INSERT, DELETE, UPDATE, SELECT、DDL: CREATE DATABASE,ALTER DATABASE, DROP DATABASE, CREATE TABLE, ALTER TABLE, DROP TABLE, CREATEINDEX, DROP INDEX, CREATE USER, DROP USER, SELECT、DCL：GRANT， REVOKE7、maridb服务端和客户端命令使用8、mysql图形管理组件phpMyadmin安装使用 第43-44天1、ftp文本传输协议C/S架构详解2、ftp连接类型命令连接及数据连接的主动与被动模式3、vsftpd的匿名用户、本地用户及虚拟用户4、vsftpd基于pam认证模块的授权实现，全面实现Vsftpd服务，详细讲解Ftp连接类型、数据传输格式、用户管理、配置管理、加密传输、安全加固、虚拟用户、并实战实现企业级基于Mysql数据库用户认证方式5、NFS服务基础原理及配置，详细讲解企业级文件共享服务NFS,从工作机制、内核实现方式详解、用户权限、访问控制、全面实战式实现6、samba服务基础原理及配置全面讲解，跨windows文件共享服务Samba、以Centos7使用为例，详细介绍配罝文件分组、共享定义、权限控制、分组权限等• 实战项目 1:实现基于虚拟用户构建vsftp账户安全管理体系• 实战项目 2:实现基于NFS企业级文件共享服务，可构建图片存储服务应用 第45-46天1、iptables四表（fiter、mangle、nat、raw）五链（perouting、input、forward、output 、postrouting）详解2、iptables主机防火墙简介3、iptables-netfilter基础详解4、iptables 命令链管理、规则管理、规则查看基本用法5、iptables 基本匹配、扩展匹配、隐式扩展、显式扩展讲解6、iptables多端口匹配、连接追踪、字符串匹配、时间匹配、并发连接数限制、速率匹配、报文状态匹配等企业级应用7、iptables规则保存、重载、生效机制及安全体系工具精讲8、iptables之forward转发9、iptables之SNAT源地址修改及DNAT目标地址修改、DNAT：端口修改实战演示10、sudo安全切换工具及配置文件visudoer精讲11、介绍企业级安全体系，当今主流防火墙设备类型，埂软防火墙优劣势、全面讲解Iptables实现模型和运作机制，详细讲解4表5链对应关系，报文头龈数据包匹配 过程、配罝方法、地址伪装、地址转换、防火墙使用技巧等，以案例讲解如何预防黑客嗅探、封停攻击iP、按时间控制业务访问、以及实现基于7层协议12、企业级安全用户权限模型介绍，全面讲解以Sudo为授权机制的用户权限模型 配置，如何控制root用户权限，如何控制企业级工程师可操作空间、执行命令范围、用户访问审计等。• 实战项目 1:利用iptables构建企业防火墙策略（饿了么实战项目）• 实战项目 2: 利用iptables构建代理上网路由环境• 实战项目 3: 利用iptables实现封停IP和结合7层功能实现如QQ、优酷等应用禁止 第47-48天（实战化教学）1、常见的网络I/O模型及同步/异步消息通知机制讲解2、常见的多路I/O复用select/poll/epoll比较3、高性能nginx特性详解及LNMP架构介绍、nginx编译安装与应用4、nginx性能优化、定位调试、定义客户端请求与限制、文件操作优化等实际应用详解5、nginx模块应用之ngx_http_access_module模块进行基于basic机制的用户认证6、nginx模块应用之ngx_http_auth_basic_module进行基于账号密码文件的认证7、nginx模块应用之ngx_http_stub_status_module模块输出nginx基本状态信息详解8、ngx_http_referer_module模块：定义合法的referer数据来防止盗链9、nginx模块应用之ngx_http_ssl_module启用ssl功能10、nginx模块应用之ngx_http_log_module定义日志的最大缓存条目、及活动时长等日志相关配置11、nginx模块应用之ngx_http_rewrite_module及常见的flag：break、last、permanent重写规则的定义方式12、nginx模块应用之ngx_http_gzip_module实现对指定类型的资源压缩传输以节约带宽；• 实战项目 1:实现基于LNMP的京东官方电子商务网站架构，并结合PHP-FPM模式进行优化• 实战项目 2: 实现基于Nginx的基于账号信息认证机制• 实战项目 3: 实现基于Nginx内容压缩功能来节省流量带宽 第49-50天1、详细讲解Linux Cluster集群概念，全面分析集群类别，介绍系统拓展的方式，scaleUP、scale OUT讲解负载均衡集群概念、高可用集群概念、介绍单点故障概念，讲解分布式系统概念2、Linux集群及系统扩展的方式、概述Linux集群类型及调度方法详解、lvs工作原理及专用术语介绍3、lvs常见的四种集群lvs-nat、lvs-dr、lvs-tun、lvs-fullnat优点及使用场景4、负载均衡集群中会话保持方式：源地址hash、会话集群、会话服务器5、Layer-4交换机（ipvs）工作原理6、ipvsadm集群服务管理工具使用7、LVS-NAT、LVS-DR的配置以及负载应用8、实战带领在Centos7上实现LVS集群配罝、服务管理、调度算法修改、后端服务器上下线、服务状态监控，状态监测方实现NAT、DR、TUN等模型演练实战项目 1:实现基于DR模型的LVS高并发负载均衡架构配置实战项目 2:实现LVS多种负载均衡算法应用场景和应用模式实战项目 3:生产环境工作场景基于后端服务器的健康状态监测机制实现 第51-52天1、LVS-FW方式实现LVS的affinity应用，LVS FWM 持久性连接应用环境理论及实现2、LVS 调度方案RR、WRR、SH、DH、LC、WLC、SED、NQ、LBLC、LBLCR详解及应用场景，全面LVS讲解八种负载均衡调度算法，编写bash脚本实现对后端健康状态监控，实现后端故障隔离及自动上线等功能，实战讲解企业级实现会话保持方法3、nginx模块应用之ngx_http_proxy_module4、nginx模块应用之ngx_http_headers_module5、nginx模块应用之ngx_http_fastcgi_module实现动静分离响应客户端7、nginx模块应用之ngx_http_upstream_module及调度算法6、深入讲解运维必备Web服务开源解决方案Nginx, 全面讲解Nginx的程序架构、内部框架、模块功能、事务处理机制、安装方法、CPU亲缘优化、配置 文件详解、调试方法、日志定制、debug调试 Https会话加密、客户端分流策略、压缩优化策略、应用优先级策略、URL重定向、URL路由改写、长短连接、访问控制、文件操作优化，用户认证、防盗链、攻击防范、降级方案等7、全面讲解正向代理、反向代理机制，实现Nginx反向代理负载均衡，跳转规则实现动静分离、IP日志记录、头部信息里写、缓存模块、缓存策略、请求超时机制、健康状态监测、判定规则、状态码定义、实现后端故障隔离及自动上线等• 实战项目 1:使用Nginx构建基于7层负载均衡，实现万级别并发架构• 实战项目 2: 实战实现基于Nginx的企业级动静分离策略• 实战项目 3: 实现日志定制、debug调试 Https会话加密、客户端分流策略、压缩优化策略、应用优先级策略、URL重定向、URL路由改写、长短连接、访问控制、文件操作优化，用户认证、防盗链、攻击防范、降级方案等实操演练 第53-54天1、HA Cluster 高可用相关原理介绍，全面讲解企业高可用实现方案，高可用集群实施注意事项、着重讲解调度器、故障判断、选票机制、心跳监测、组内选举原理，冗余方案2、vrrp协议与专业术语介绍，以及企业中应用场景3、keepalived相关工作原理介绍，全面讲解Keepalived工作方式，Keepalived核心组件、报警机制、切换机制、心跳信息传输等4、keepalived配置文件详解，详细讲解Keepalived配置文件核心字段如：抢占模型、权重、节点状态、通告间隔、认证模块5、keepalived软件安装与配置，实战带领实现Keepalived主从架构双主切换方案、报警定制、日志分析等6、keepalived 自定义监控脚本，Keepalived双机热备案例(全面介绍IP漂移、故障转移、脚本触发、报警插件触发等企业用法）7、keepalived高可用主从、主主架构讲解，Keepalived配置文件详解和企业使用场景（结合Haproxy实现千万PV访问的企业级架构实战）• 实战项目 1:实现keepalived结合LVS高可用架构方案• 实战项目 2:带领实现Keepalived主从架构双主切换方案• 实战项目 3: 实现企业级生产环境keepalived故障转移后脚本触发报警机制 第55-56天1、http协议缓存原理及常用首部讲解，缓存的命中率计算及再验证机制2、百万并发的大型互联网架构缓存的拓扑结构私有缓存和公有代理缓存3、回源原理和CDN讲解，多级缓存缓存处理机制，缓存控制机制与新鲜度检测机制详解4.详细介绍加速核心概念：本地Cache、镜像服务、远程加速、带宽优化、集群抗攻击、分流系统等，并以目前主流互联网技术举例5、全面介绍目前主流开源缓存技术解决方案，着重对比Squid、Varnish、Nginx等，并深入讲解Varnish的优势以及目前生产环境应用其特性6、全面讲解Varnish缓存技术，深入介绍Varnish工作机制、核心架构、组成方案关键模块等，并详细介绍Child/cache模块及其核心组件7、详细讲解如何实现生产环境中Varnish状态查看、配置文件管理、缓存规则编写、日志分析、缓存策略定制8、深入讲解Varnish配罝文件，介绍其内置函数、钩子函数、缓存模块、主机模块、负衡算法、群组策略、健康状态监测机制、Http头部改写等9、实战带领实现Varnish安装、配置、管理、维护方法，讲解其核心线程原理， 并根据企业级应用进行调优和加速，并以电子商务网站为例，实现缓存加速效果观察和监测实战项目 1:实现基于varnish电子商务网站静态缓存应用，使性能提升10倍+实战项目 2:使用varnish做生产环境图片缓存策略实战项目 3:结合Haproxy、Varnish、智能DNS实现千万级小规模CDN架构 第57-58天1、高性能负载均衡软件HAproxy介绍，四层负载均衡与七层负载均衡的特点及HAproxy与LVS之间的对比说明3、Haproxy四层、七层负载均衡原理介绍，Haproxy全系列版本核心功能：内容交换、ACL、负载均衡算法、内容探测、透明代理、内核Tcp拼接、分层设计、连接复用、会话速度限制等全面介绍4、详细介绍Haproxy新版本全新优势：会话率、会话并发能力、数据处理速度5、详细讲解Haproxy安装方法、配罝文件结构、配罝文件语法结构、Haproxy核心模块、启动方式Web管理接口、状态查看等6、全面讲解Haproxy核心配置参数:maxconn、debug、defaults、 frontend、backend、listen、bind、stats等，以及生产环境常见配货选项7、全面讲解Haproxy负载均衡算法：RR轮训、静态加权轮询、加权最小连接、源地址哈希、URl哈希、参数哈希等8、讲解Haproxy调优手段，如并发调整、压缩、连接复用、负载模式、算法优化、Cookie 粘性、短连接、访问控制、健康状态监测等• 实战项目 1: 大众点评haproxy实战配置案例以及实现动静分离策略• 实战项目 2: 利用Haproxy实现MySQL数据库读请求负载均衡功能，结合Nginx、Tomcat在Web架构中集群实现方式和实施方案 第59-60天（高端运维自动化课程）1、自动化运维技术框架系统安装、程序发布、应用布局宏观介绍2、Ansibles工具特性及工作机制详解3、Ansible多方式安装及简单应用4、Ansible常用模块command、shell、copy、cron、fetch、file、service、user、setup等模块详解5、详细介绍Ansible生产环境应用案例和实战操练、批量进行上百台服务器状态 监测、yum包管理、多目录查看、文件获取、多用户管理等6、Anshible playbook（剧本）核心元素Hosts、Tasks、Variables、Templaters、Handlers、Roles详解7、Ansible playbooks基础组件实际应用实例讲解8、深入讲解playbooks语法、以及配罝方法、和配罝技巧，并结合企业用法详细说明Ansible创建role的步驟，方法以及模板的使用、注意事项、9、role内各目录中可用的文件介绍、详细讲解核心技术以及使用技巧。实战演示使用循环同时安装 nginx、memcached、php-fpm等程序包核心技术10、Ansible实现主/备模式高可用主/备模式高可用nginx实践• 实战项目 1:生产环境基于自动化运维常见场景如自动化发布、灰度发布、批里上线、降级方案、无缝切换等核心技术• 实战项目 2: 实战演练ansible 批量管理上百台服务器的运维自动化管理• 实战项目 3: nginx、php-fpm 进行个性化配置文件定制，并通过ansible自动化分发管理 第61-64天 1.运维监控核心技术框架、监控关键指标介绍、监控硬件、软件、意外事故、关键事件、监控系统、趋势数据、监控通道、报警机制等全面介绍2、详细介绍监控系统及SNMP协议、讲解Snmp命令读取、数据传输、通用支持、使用场彔等知识点，全面介绍配罝和使用方式3.对比介绍Nagios、Zabbix、Ganglia、Cacti开源监控体系方案以及优劣势，并着重讲解当今主流开源监控体系方案Zabbix4、全面介绍Zabbix3.0监控特性、无代理监控、Web服务监控数据库监控、Zabbix内部监控、Zabbix特性及功能详解5、Zabbix架构体系介绍，详细讲解Zabbix程序架构、Web界面、Zabbix数据库、Zabbix服务端、Zabbix代理等，全面介绍Zabbix企业级架构和常用核心组建详细介绍常用术语、主机、主机组、监控项、触发器、事件、动作、报价升级、媒介、通知、远程命令、模板、应用、Web场景等、深度讲解Zabbix进程 转理企模型和核心进程模块6、实战讲解Zabbix安装依赖组件和各模块功能，全面讲解Zabbix安装过程以及注意亊项，详细介绍Zabbix数据库安装过程和日志设置方式7、详细介绍Zabbix监控项含义、以及使用key实现自定义监控项、分组配罝、监控事件间隔、绘图功能，核心指标和模板等8、实战实现系统核心指标监控如CPU、内存、硬盘、网络、LOAD等，并实战实现自定义监控Nginx服务的数据指标，包括访问人数、并发、访问等9、实现Zabbix企业级高级自动化功能，自动发现注册、网段扫描等，全面讲解Zabbix自动注册高级应用核心知识点，并通过模板匹配方法，实现快速配罝10、详细讲解Zabbix Proxy分布式企业级高级用法，实战带领实现Zabbix生产环境多台服务器核心部署思路，以及架构搭建11、Cent0S7上Zabbix的安装与实现Zabbix的实时监控，主动监测和被动监测区别、宏、变量等高级用法和技巧12、详细讲解Zabbix报警机制的实现及其相应的设置，并介绍基于微信、邮件、短信、电话等全方位报警体系和核心要素，一键安装zabbix agent及邮件和短信报警实战项目 1:实战实现zabbix分布式架构体系搭建，以及核心指标监控实战项目 2:实现zabbix对nginx、mysql、linux系统、haproxy等核心指标监控和报警策略制定实战项目 3:实现zabbix高级自动发现功能，以及自定义开发zabbix 监控插件 第65-66天（网络班1-64天为就业班内容，65-120天为架构师班内容） 1、分布式存储概念介绍，以及动态资源、静态资源存储方式介绍，半结构化数据.文件系统、P0SIX规范、分布式存储过程等2、分布式存储系统挑战：节点间通信、数据空间平衡、数据容错、文件系统支持等3、分布式文件系统设计目标：访问透明、位罝透明、并发透明、时效透明、硬件透明、可拓展性、复制透明、迁移透明，实现高拓展性、可靠性、成本廉价总目标4、全面介绍分布式文件系统种类：Google File System. HDFS. TFS. Glus-terFS、Ceph、MogileFS、MooseFS FastDFS其特性以及介绍5、分布式系统CAP理论模型和BASE机制、通用分布式存储系统、专用分布式存储系统介绍6、全面讲解MogileFS特性，应用层存储、多节点冗余、MySQL存储节点、命名空问格式API接口、元数据、元数据信息介绍7、仝面讲解MogileFS核心组件，Tracker跟踪节点、MoçStroed存储节点、DB元数据信息节点配罝和管理方法，以及注意事项8、实战带领实现MogileFS安装、配置文件核心配置、企业生产环境使用细节和方法，多节点存储集群，企业级存储架构架设9、讲解MogileFS高级用法，深入介绍数据平衡、数据校验、数据上传、结合Nginx实现MogileFS反向代理等10、全面讲解FastDFS组成架构、数据存储格式、数据存储过程等，洋细介绍FastDFS数据处理流程以及生产环境用法11、实战带领实现FastDFS安装、核心配置文件管理、自制RPM包安装、节点通信调试服务启动、故障分析、曰志查看等技巧，并介绍生产环境用法• 实战项目 1:实现mogilfs企业级分布式存储方案• 实战项目 2: 实现FastDFS企业级分布式集群架构，可承载PB级别存储架构• 实战项目 3: nginx、php-fpm 进行个性化配置文件定制，并通过ansible自动化分发管理 第67-70天1、Memcached的介绍和使用以及Memcached的PHP扩展的使用，并完成Nginx与Memcached的整合实现高性能页面级缓存架构方案2、可扩展Web服务设计及相关解决方案，千万并发运维架构设计要点以及注意事项3、全面对比介绍语言种类和区别，如C、C++、go,应用级：C#, JAVA、Python、 Perl、Ruby、 PHP、 Erlang 等4、全面介绍JAVA语言多线程、垃圾回收、动态链接、动态拓展、结构化错误处理等全新特性，以及互联网Web公司应用JAVA语言的场景5、讲解企业级Web容器头现方式如：Weblogic、Websphere、tomcat、Jboss、Jetty 等6、全面讲解企业级JAVA容器Tomcat下载方式、安装、配罝、容器组件、启动脚本等7、深入讲解Tomcat目录结构，如bin、lib、conf、webappt work、temp 目录功能和用途8、手把手带领掌握Tomcat配置文件核心要素，如server.xml, context.xml, web.xml,catalina.policy, logging-propetie等9、实现Tomcat热部署、手动部署等方式，掌握Tomcat启动流程，Webapp管理工具，Vhosts管理工具，Web管理页面等10、实战带领实现利用Tomcat容器实现电子商务商城网站配置，并与MySQL和 Nginx实现企业级架构方案组建11、今实现Tomcat多虚拟主机配置方式，基于SSL加密的Tomcat管理方式，基于用户认证的访问方式等12、利用Nginx实现Tomcat动静分离机制，使用负载均衡技术将请求至Tomcat及DeltaManager 的使用13、企业级应用案例，利用Apache核心模块mod_proxy和modk实现反向代理Tomcat代理和会话保持功能实战项目 1:实现tomcat容器的平台网站站点实战项目 2:实现企业级基于tomcat的session集群复制实战项目 3:利用Nginx实现tomcat集群，并实现动静分离架构 第70-74天（顶级数据库王牌课程）1、关系型数据库管理系统介绍2、关系型数据库的关系运算和设计范式3、关系型数据库表、索引、视图及三层模型讲解4、MariaDB安装与安全配置5、mysql的客户端程序mysql、mysqldump、mysqladmin、mysqlimport工具介绍6、mysql服务器全局变量、会话变量、及状态变量详解7、SQL语句之DDL、DML语句用法详解8、表的创建、修改、删除及表的状态信息查看9、常见的索引：聚集索引、主键索引、稀疏索引、B树索引的介绍10、索引的管理：查看、创建、及删除11、查询语句SELECT之多表查询、联合查询及子查询；12、MySQL逻辑架构及查询的执行流程详解13、MySQL存储引擎之InnoDB、MyISAM引擎详解14、MySQL基于读/写锁实现并发访问控制15、MySQL事务之ACID测试、及事务的隔离级别READ UNCOMMITTED 、READ COMMITTED 、REPEATABLE READ 、SERIALIZABLE 详解16、MySQL企业级权限管理和授权全面讲解，深入介绍管理类权限、程序类权限、操作类权限、库权限和表级别权限、数据操作权限、字段级别权限、上帝模式 权垠• 实战项目 1:实现mysql数据库快速安装以及实际工作中安装常见问题• 实战项目 2:实战实现mysql授权，以及企业级安全权限控制• 实战项目 3: 使用mysql远程管理工具实战技巧第75-78天1、MySQL用户授权GRANT及权限管理类2、查询缓存相关的服务器变量及状态变量3、MySQL索引的分类及优化查询4、CentOS 7编译安装MariaDB5、mariadb日志之查询日志相关命令及变量详解6、mariadb日志之慢查询日志相关变量及优化查询7、mariadb日志之错误日志分析8、mariadb日志之二进制日志相关的变量设定及查看9、mysqlbinlog命令的用法10、二进制日志、中继日志及事务日志详解11、常见的数据库备份类型：完全备份、增量备份、差异备份；热备份、温备份、冷备份；物理备份、逻辑备份：12、常用的备份策略及方案设计：完全+增量13、常用的备份工具mysqldump、cp, tar等复制归档工具、lvm2的快照、mysqlhotcopy应用场景分析14、结合备份方案，选择合适的备份工具15、备份的数据快速恢复及注意事项16、逻辑备份工具：mysqldump使用实例讲解17、基于lvm2的备份过程详解18、MySQL企业级数据库数据备份策略讲解，深入介绍完全备份、增量备份，差异 备份特性，热备、温备、冷备形式，物理备份、逻辑备份概念，以及生产环境备份方案设计实战项目 1:Mysql日志错误分析，以及生产环境常见问题分析实战项目 2:实战实现Mysql备份策略实战项目 3:实战实现mysql结合crontab实现企业级定期备份管理和数据快速恢复及数据验证 第79-82天1、xtrabackup实现完全备份、增量备份、部分备份实例讲解2、MySQL常见的扩展方式Scale Up、Scale Out3、MySQL复制特点及复制架构详解4、MySQL主从复制中主节点、从节点配置实例详解5、MySQL复制架构中的数据一致性及事务安全性保持6、MySQL主主复制配置原理及案例演示7、MySQL半同步复制原理及案例演示8、MySQL复制过滤器配置原理及实现指定数据库（表）的快速备份案例演示9、复制过程中的日志清理与监控命令详解10、主从复制中数据不一致的解决方案11、MySQL数据库的切分：垂直切分：分库、水平切分：分表12、MySQL读写分离组件：Atlas、Amoeba介绍，13、MySQL复制中数据损坏或丢失、混合使用存储引擎、server id的不唯一、及复制延迟中出现的问题及解决方案14、MHA及基于wresp协议实现多主模型Galera Cluster的配置实例讲解15、王牌课程-全面讲解MySQL复制技术，包全面讲解Dump线程、SQL线程、二进制曰志、中继曰志工作原理以及主从实现方式，括主-从、主-主等架构及基于 SSL加密传输的实现16、以MySQL应用为中心，全面介绍生产环境基于数据驱动的优化策略，着重讲解硬件优化、系统调优及MySQL服务配置优化、SQL优化、缓存优化、安全加固、数据保护等• 实战项目 1:实现mysql主从复制架构，并深入理解各个过程和面试常见问题应对策略• 实战项目 2:实现mysql一主多从模型，对数据不一致进行快速回复• 实战项目 3: 实现基于GaleraCluster的Mysql集群解决方案第83-84天1、Key-Value模型与存储体系介绍，多种nosql数据库介绍，全面讲解NoSQL基础、发展、以及生产环境应用和原理，NoSQL数据库特性、技术流派及代表性项目2、存储系统的三种分类RDBMS、NoSQL、NewSQL详细讲解3、redis组件及其守护进程讲解，以及安装和配置过程详细讲解4、redis的两种认证实现方法，和企业常见安全策略加固5、redis数据库管理、事务操作，多种nosql操作语句介绍，及生产环境使用场景讲解，如腾讯、微博、小米秒杀等常见nosql数据库应用场景6、redis的发布与订阅功能、持久化存储、复制详解以及实现redis故障数据恢复7、redis的分布式管理，redis集群配置和多节点管理机制8、redis企业常见面试题和redis企业应用9、redis和mongodb基础功能和工作场景应用对比10、redis常见优化策略，和缓存设置机制11、深入讲解Redis体系结构、安装配置及应用，以及数据结构、企业级优势、持久能力、主从复制、使用场景、高并发特性等实战项目 1:实现redis主从复制架构实战项目 2:实现redis持久化存储以及生产环境数据恢复实战项目 3:实战操作redis数据库实现key-vulue数据管理 第85-88天 1、企业自动化工具Puppet使用场景以及使用方法，如何去搭迂企业运维自动化平台架构2、Puppet资源抽象层含义，资源定义、资源浏览、Puppet组成架构、数据模型、类、参数、模块等全方位讲解3、详细讲解Puppet使用技巧：判断语句、多分支、类的继承、文件规范等4、详细讲解Puppet资源定义：权限、用户、文件、依赖、源信息等5、实战实现Puppet安装、配罝、启动、多节点管理、主动推送策略以及生产环境注意事项以Nginx和Haproxy配罝文件为例，实现Puppet自动化配罝文件管理6、详细讲解Puppet高级用法：安装配置puppet-dashboard、Puppet kick功能实现7、puppet资源的定义、浏览及查找8、C/S架构中，manifest的应用9、manifest文件实现资源申报、定义类、声明类等功能10、puppet语言支持的数据类型详解11、puppet中模块目录的结构及模块安装详解• 实战项目 1:实现puppet大规模一键化部署方案• 实战项目 2:实现puppet对常见服务自动化管理方案• 实战项目 3: 实现puppet对上百台服务器自动化管理架构模型 第89-90天（顶级虚拟化云计算课程）1、全面介绍企业级虚拟化技术类型：完全虚拟化、半虚拟化、模拟虚拟化、库虚拟化、应用虚拟化、实时迁移，云计算底层虚拟化技术2、全面讲解KVM虚拟化技术，介绍其组成搂块、运行方式、内存管理..硬件支持、存储支持、实时迁移、设备驱动等3、详细讲解Kvm管理工具的使用，讲解qemu-kvm、qemu-img、qemu-io工具、libvirt工具等4 Kvm生产环境安装方法、虚拟机创建管理、镜像制作、镜像克隆、虚拟机网路管理、创建物理网桥、虚拟机信息、虚拟磁盘管理等5、全面讲解Kvm企业级高级用法，动态添加网卡、动态增删Interface、脚本实现动态管理、硬盘热加载、故障迁移等6 X86平台虚拟化技术难点及相关解决方案原理详解、Xen虚拟化技术精讲、全面介绍CPU虚拟化、内存虚拟化及I0虚拟化，虚拟化种类及相关特点7、基于Qemu-kvm命令行工具找管理Kvm、基于libvirt和Virt-manager工具钱管理Kvm;全面介绍KVM的核心功能：CPU、内存、存储及网络虚拟化配置8、带领实现KVM和Xen企业级虚拟化解决方案，以戴尔R710服务器为模板，实现一物理机虚拟数十台生产环境虚拟机实战案例实战项目 1:实现基于KVM虚拟化的centos7系统定制实战项目 2:实现KVM镜像制作和克隆管理实战项目 3:实现生产环境一键部署多机实战案例 第91-92天1、全面讲解Git版本管理工具企业应用场景以及常见管理使用工具2、本地版本控制系统;集中化的版本控制系统，分布式的版本控制系统核心概念介绍3、Git工作原理及组成架构介绍，着重讲解工作区、暂存区、版本库核心概念，深入讲解Git版本库，工作目录、索引、对象库管理方式和工作原理4、全面讲解Git安装方法、命令工具使用、配置选项、生产环境常见用法等5、深入讲解Git库全局、系统、特有配置,打包文件、文件分类的企业级用法6、讲解Git add、Git diff、Git reset、Git status等命令工具使用技巧7、全面讲解Git版本控制、脚本自动化管理、Git分支合并，企业级远程分支管理、Git服务器搭建、版本课程等高级用法8、实战：基于生产环境持续集成案例，Jenkins+gitlab+maven+shell• 实战项目 1:实战基于生产环境持续集成案例，Jenkins+gitlab+maven+shell• 实战项目 2: 实现基于git的版本控制• 实战项目 3:实现git分支合并和企业级脚本自动化管理 第93-94天1、搜索引擎核心知识点介绍，搜索引擎核心搜索组件：索引(index),类型(type),文件(document),映射(mapping)深入介绍2、ES集群组件介绍：集群(duster),节点(node), shard(primary, replica)工作机制以及实现方式深入讲解3、详细讲解ES Cluster工作过程，介绍集群有状态：green, red, yellow各自含义、监听端口、建立通信机制、节点通信等4 Logstash四类API讲解：检查集睬节点、索引等健康与否，以及获取其相应状态；管理集群、节点、索引及元数据；执行CRUD操作；执行高操作，例如 Paging, Filtering等5、Elasticsearch Cluster应用整合，分析器组件构成：字符过滤器、分词器、分词过滤器，查询语句结构等全面介绍6、 Logstash agent/server应用，Logstash agent、Redis Logstash server，以及生产环境搭建流程和注意事项7、Kibana及ELK整体架构讲解，Logstash插件体系介绍，详细讲解其配置框架、插件用法、数据类型、字段引用、条件判断等• 实战项目 1:分布式收集Nginx 日志于Elk集群，并通过Kibana展示；• 实战项目 2:分布式收集 JAVA日志于Elk集群，并通过Kibana展示；• 实战项目 3:分布式收集Syslog曰志于Elk集群，并通过Kibana展示 第95-96天（容器云docker 顶级讲解）1、全面阐述Docker核心技术体系，以及Docker在企业中用法和未来行业前景，深入分析当今容器虚拟化在企业中的优势和价值2、详细讲解Docker技术起源：NameSpace、CGroufx AUFSx Device相关概念和用途3、Docker核心原理以及相关组件：Docker client、Docker deamon、image、Repository、Docker container、 Docker link、 Docker volume 全面深入讲解4、Docker常用命令：环境信息、系统维护、日志信息、Docker hulx获取映像、启动容器全面讲解，并带领实现Docker安装和使用5、Docker镜像、容器和仓库管理、容器启动方法、数据卷使用、备份和恢复、网络模型、容器间的依赖关系、容器的资源限制、docker的监控命令全面介绍6、Dockerfile的工作机制、原理、指令、命令、语法、使用方法、注意亊项、生产环境用法全面介绍7、Docker虚拟化网络及应用、数据管理、自定义网桥及跨主机容器互通、固定ip实现、安全加固等详解8、Docker高级用法：基子Openvswitch的二层网络构 Dockerfile高级进阶使用Supervisor来管理多任务、Docker Compose项目汫解、Docker Swarm项 目和Etcd讲解9、如何自建Docker私有仓库、生产环境部署和实战展示10、实现互联网容器云技术-Docker容器云实战项目 1:实现docker容器制作和管理实战项目 2:通过docker实现lnmp电子商务网站架构搭建实战项目 3:自建Docker私有仓库，进行生产环境部署和演示 第97-100天（国内首家K8S实战讲解）1、kubernetes基础概念精解，Docker 用户过度到 Kuberentes 准备2、kubernetes集群部署，Kubernetes 中的网络管理3、kubernetes对象介绍以及原理讲解4、kubernetes集群应用和批量部署5、在kubernetes 部署第一个应用6、kubernetes之pod 调度机制，Kubernetes 中的 Pod 的生命周期与调度管理7、K8S服务组件之kube-dns&amp;Dashboard8、Kubernetes中的角色访问控制机制（RBAC）支持8、Docker和Kubernetes：构建和缩放容器化应用程序，自动替换，自动重启，自动复制，自动扩展介绍• 实战项目 1:实战基于生产环境持续集成案例Jenkins+gitlab+maven+shell• 实战项目 2: 实现基于git的版本控制• 实战项目 3:实现git分支合并和企业级脚本自动化管理 101-102天（选修赠送课程）1、详细讲解linux操作系统的工作原理2、不同硬件所能完成哪些功能，硬件之间如何协调工作3、系统与硬件之间的关系，系统如何控制硬件的工作4、虚拟化技术基础原理之CPU虚拟化、memory虚拟化、IO虚拟化精讲5、Intel硬件辅助的虚拟化及分类6、虚拟化技术的分类，半虚拟化和完全虚拟化的区别7、虚拟化网络的实现• 实战项目 1:实现内核优化策略和选择方向• 实战项目 2:系统瓶颈分析和核心指标判定 103-104天（选修赠送课程）1、Xen虚拟化技术精讲2、Xen虚拟化技术中调度、中断、内存、IO、网络3、Xen在RHEL6或CentOS6上的安装、配置及简单应用4、Xen环境中虚拟存储和虚拟网络设备的配置及管理详解5、Xen管理工具栈xm及xl从入门到精通实战项目 1:实现xen虚拟化技术配置和搭建实战项目 2:实现xen虚拟化网络管理配置 105-106天（选修赠送课程）1、存储和处理平台hadoop介绍2、Mapreduce工作原理及应用开发简介3、MapReduce类型及格式及特性详解4、集群资源管理YARN：RM、NM、AM详解5、HDFS基础概念、命令行接口、据序列化、数据流详解6、Hadoop单机模型伪分布式模型、及完全分布式详解7、hadoop基础组件HDFS、NN、SNN、DN详解8、生产环境中Hadoop硬件选型要点9、Hadoop调度算法及其选用• 实战项目 1:实战hadoop系统配置和搭建• 实战项目 2: 实现大数据基本应用模型测验• 实战项目 3:Hbase配置和启动高级Linux 107-108天（选修赠送课程）1、NoSQL及MongoDB简介2、MongoDB常见术语及概念解析3、MongoDB数据库的创建、删除4、MongDB的文档插入、更新查询及删除5、MongoDB条件操作符及$type操作符详解6、MongoDBLimit与skip方法介绍7、MongonDB的排序、索引、聚合、复制、分片详解8、MongoDB的备份mongodump与恢复 mongorerstore9、mongostat 和 mongotop 两个命令实现监控MongoDB10、MongoDB多文档之间的逻辑关系详解11、MongoDBjava环境的配置与php扩展的安装12、MongoDB数据库引用、查询分析、及正则表达式的使用13、MongoDB集合及自动增长• 实战项目 1:Mongodb数据库安装和配置• 实战项目 2:Mongodb与php拓展结合搭建• 实战项目 3:生产环境Mongodb数据插入和更新管理注意事项 108-110天（选修赠送课程）1、rabbitmq基础讲解2、rabbitmq集群模式分类3、rabbitmq的安装部署4、IaaS、PaaS、SaaS云技术介绍5、Openstack组件及逻辑结构介绍6、Openstack 核心组件Keystone、Glance、Nova讲解7、Openstack OpenStack的网络模型及Neutron服务8、OpenStack中物理网络连接架构：管理网络(management network)：数据网络(datanetwork):外部网络(external network):API网络9、Openstack的图形界面DashBoard配置10、全功能OpenStack环境部署案例详解11、openstack文件共享服务之Manila云节点的安装与配置过程详解12、openstack之orachestration安装配置，实现基与heat的应用启动、创建虚拟机并自动处理流程13、openstack之telemetry安装配置实现监控和计量功能，提供OpenStack云计算的账单，性能指标，扩展性和满意度的调查表。实战项目 1:rabbitMQ安装和部署实战项目 2:Openstack集群配置和搭建实现实战项目 3:手动实现Openstack创建虚拟机应用 110-112天（选修赠送课程）1、Linux操作系统原理知识详解2、进程调度、进程优先级、内存分页、页面调度、中断、I/o驱动、DMA等相关概念详解3、cpu的任务调度器Big O（1）标准4、Linux系统性能调优之性能分析工具详解5、Linux系统参数调优之TCP/IP参数调优6、Linux系统调优之磁盘调优及使用elvtune调谐磁盘I/O• 实战项目 1:网络内核参数优化和设置• 实战项目 2: 企业级磁盘调度算法优化和配置 113-114天（选修赠送课程）1、python语言及基础介绍2、python程序的执行流程概况3、python性能优化工具PyPY、Shed Skin、Psyco详解4、python程序文件格式：模块、语句、表达式和对象等基础概念介绍介绍5、python基本数据结构序列介绍6、python关键要素之基本数据类型：Integral、浮点型、字符串型数据类型详解7、python关键要素之变量命名及引用8、python关键要素之组合类型：序列类型、集合类型、映射类型详解9、python关键要素逻辑操作符：身份操作符is、比较操作符、成员操作符in/not in、逻辑运算符and、or、not详解10、pyton常见的控制流语句、if、while、for … in 、try详解11、python函数的输入输出及创建、调用详解12、python文件处理及数据持久化的解决方案13、python生成器的构建及python异常处理机制14、python执行环境构建及代码测试示例15、python程序基于ssh实现文件的上传下载及异地容灾备份方案示例讲解• 实战项目 1:搭建python执行环境和代码测试• 实战项目 2:实现python基于ssh上传下载• 实战项目 3: 实现python运维自动化基本语法构建 115-116天（独家企业级项目）1、马哥教育千万PV网站架构设计，以及上百台服务器架构构建与部署2、根据业务需求，对服务器硬件进行选型，对CPU、内存、硬盘、等数据进行统筹3、对操作系统类型，版本，和常用开源软件，以及版本进行选型4、根据业务场景，设计出对应的运维架构框架，从用户引导层、负载均衡层、缓存层、应用层、数据层、管理端、监控端等多维度出发5、对设计的方案进行可行性研究，验证架构的可行性，从业务的质量、维护成本、可用性、可扩展性等多角度进行衡量6、系统初始化（关闭不需要的服务、做安全控制、建立对应目录、调整系统核心参数）7、Mysql每周日夜里3点做一次全量备份，周一到周六每天夜里2点做一次增量备份。本地备份完，放到备份服务器上。确保放成功后，将本地备份删除8、监控需要全覆盖无死角，监控系统、网络、应用、业务数据。（业务可调用LVS或者haproxy网络连接数来展示） 117-120天（独家高薪就业秘籍）1、以高级运维工程师运维日常工作内容全面介绍工作场景和岗位职责2、从简历格式，技能描述，项目案例，个人优势360°打造精致个人简历3、国内4大招聘网站简历上传，投递，工作岗位筛选和黄金岗位识别技巧4、简历投递时间节点，简历邮件标题，开场白书写规范和技巧5、专业面试官讲解面试前、面试中、面试后和工作中注意事项6、全面讲解技术面试和人事面试的侧重点以及面试回答方向和方法7、从着装、自我介绍、职业发展、薪资谈判等全方面培养面试综合能力8、全面讲解创业型公司、传统企业、互联网公司的工作环境和技术架构9、讲解薪资和股票期权抉择，以及未来技术发展趋势，和就业公司选择10、按照企业面试官标准 ，进行一对一的技术面试和人事面试指导11、针对学员面试中常见的技术问题，企业教练进行专业辅导12、针对学员情况，讲解未来5年的职业发展和个人成长规划13、毕业后可加入价值12800元的马哥教育往期智囊团和高端人脉圈14、终身享受马哥教育高端独家业内高薪就业机会推荐 学完本系列课程具备技术：Linux管理、Linux应用、网络、安全、系统、数据库、python、shell脚本、nginx、hadoop、openstack、git、ansible、zabbixelk、集群、lvs、kvm、keepalived、docker、k8s、消息队列、puppet、redis等一线互联网高端运维核心技术可面试岗位为Linux运维工程师、linux云计算工程师、Linux高级工程师、Linux应用运维工程师、大数据运维工程师、系统工程师、运维架构师、云计算安全工程师。毕业后，起薪可达12K-18K，1年后薪资可达18-25K，三年后可达35-50K","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.baidu.com/categories/ansible/"}],"tags":[{"name":"ansible plan","slug":"ansible-plan","permalink":"http://www.baidu.com/tags/ansible-plan/"}],"author":"yuangeng"},{"title":"Hello World","slug":"hello-world","date":"2019-05-01T09:43:25.619Z","updated":"2019-05-01T10:35:26.075Z","comments":true,"path":"2019/05/01/hello-world/","link":"","permalink":"http://www.baidu.com/2019/05/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hello","slug":"hello","permalink":"http://www.baidu.com/categories/hello/"}],"tags":[{"name":"hello","slug":"hello","permalink":"http://www.baidu.com/tags/hello/"}],"author":"yuangeng"},{"title":"plan","slug":"plan","date":"2019-04-05T09:36:34.000Z","updated":"2019-05-01T14:53:08.286Z","comments":true,"path":"2019/04/05/plan/","link":"","permalink":"http://www.baidu.com/2019/04/05/plan/","excerpt":"","text":"planQ:web压力测试工具 A:Apache JMeter // Web Application Stress Tool // gatling // locust autoMysql / Mongodb / RedisTomact NginxKubernetes / Dockerpython shellAnsible/ Puppet / SaltStack / FabricZabbix/ Nagios / Cacti / Grafana / Prometheus / ELK /Kafka jenkins / gitlab / Lvs / HaproxyLAMP / LNMP/ DAS/SNA/NAS/","categories":[{"name":"plan other","slug":"plan-other","permalink":"http://www.baidu.com/categories/plan-other/"}],"tags":[{"name":"plan","slug":"plan","permalink":"http://www.baidu.com/tags/plan/"}],"author":"yuangeng"},{"title":"ansible","slug":"ansible_mageedu","date":"2019-04-05T09:36:34.000Z","updated":"2019-05-01T14:51:59.814Z","comments":true,"path":"2019/04/05/ansible_mageedu/","link":"","permalink":"http://www.baidu.com/2019/04/05/ansible_mageedu/","excerpt":"","text":"AnsibleAnsible 基础 ANSIBLE_CONFIG 环境变量，可以定义配置文件的位置 ./ansible.cfg 存在于当前工作目录 ~/.ansible.cfg 存在于当前用户家目录 /etc/ansible/ansible.cfg 默认目录 Ansible命令主机要求：windows除外 配置语言： yaml，json只有server role:ansible 可以重复使用的 Ansible: https://github.com/ansible/ansible 从release下载安装包 需要pip安装包的依赖 log： https://www.cnblogs.com/xielisen/p/6817807.html 查看文件个数：ls -l | grep ‘^-‘ | wc -l ##################################马哥 Ansible 文件传输命令执行：应用部署，配置管理，任务流编排 企业应用场景：开发，测试，发布，生产，灰度环境（基于主机，用户，地区） vie0 修改主机ip ansible -m pingm:模块ansible 127.0.0.1 -m ping 在 /etc/ansible/hosts中配置主机清单测试网络通讯;ansible 192.168.1.101 -m ping -k输入口令（密码）k: 密码认证建议基于key验证etc/ssh/sshd_configansible all -m pingall: 代表主机清单的所有主机 ansible.cfgforks=5 并发执行5 ansible-doc:显示模块命令 ansible websevers –list-hostsansible all –list-host ansible debserver -m ping -u wang -k 以wang的身份去连接 ansible debserver -m command -a ‘ls /root’ -u wang -k -b -K以wang身份连接，切换到root用户权限，默认为root -K root口令 usermod -a -G wheel wang 将wang加入到组 K的口令;sudo中：取消下面一行的注释：%wheel ALL=(ALL) NOPASSWD:ALL 基于key验证 ssh-keygenssh-copy-id 192.168.80.101ssh-copy-id 192.168.80.102……. &amp; linux中表示后台执行 ansible all -m command -a “sleep 10”休眠10s command: ansible all -a ‘ls /data’ ansible all -a ‘df -h’ ansible-doc command creates 存在不执行 ansible all -a ‘removes=/etc/fs cat /etc/fstab’ removes 不存在不执行 ansible all -a ‘creates=/etc/fs cat /etc/fstab’ chdir 切换文件夹ansible all -a ‘chdir=/root ls’ ansible 192.168.80.101 -a ‘/data/test.sh’执行该主机上/data/test.sh注： 注意规范 #！/bin/bash 创建账号：ansible all -a ‘useradd test1’查询：ansible all -a ‘getent passwd test1’ command 命令对管道，重定向,变量 特殊符号支持有问题，建议shell shell：ansible all -m shell -a ‘echo $HOSTNAME’ 更改口令:ansible all -m shell -a ‘echo magedu|passwd –stdin test1’ script： chmod +x test.sh ansible all -m script -a ‘/root/ansible/test.sh’在所有主机上执行test.sh ansible all -a ‘getenforce’ cp /etc/sysconfig/selinux &gt;vim selinux copy:ansible-doc -s copy ansible all -m copy -a ‘src=/root/ansible/selinux dest=/etc/selinux/config backup=yes’文件复制 ansible all -m shell -a ‘getenforce’ ansible all -m copy -a ‘src=/etc/shadow dest=/data mode=000 owner=root’ ansible all -m copy -a ‘content=”hello\\n thanks \\n “ dest=/data/f2’直接写内容生成文件 fetch：从客户端去文件到服务器端，与copy相反 ansible all -m fetch -a ‘src=/var/log/messages dest=/data’从远程主机抓取log/message,到服务器，仅限单个文件 ansible all -m shell -a ‘tar jcf log.tar.xz /var/log/*.log’ 包的加压与解压archiveunarchive file： ansible all -m file -a ‘name=/data/f3 state=touch’ 创建文件ansible all -m file -a ‘name=/data/f3 state=absent’ 删除文件ansible all -a ‘ls -l /data’ ansible all -m file -a ‘name=/data/dir1 state=directory’ 创建文件夹，’state=absent’ 删除 ‘src=/etc/fstab dest=/data/fstab.link state=link’ 创建软连接‘dest=/data/fstab.link state=absent’ 删除软连接‘dest=/data/* state=absent’ 删除所有文件‘dest=/data/ state=absent’ 删除文件夹不能删除挂载点上的 ansible 192.168.80.101 -m hostname -a ‘name=new_name’ 修改主机名 cron： ansible all -m cron -a ‘minute=* weekday=1,3,5 job=”/usr/bin/wall FBI warning” name=warningcron’ 创建定时报警任务，写入crontab ansible all -m cron -a ‘disabled=true job=”/usr/bin/wall FBI warning” name=warningcron’ 禁用此任务，必须加name ‘job=”/usr/bin/wall FBI warning” name=warningcron state=absent’ 删除 yum/etc/yum.repos/base.repo yum仓库配置 ansible all -m yum -a ‘name=vsftpd’安装多个软件用’,’隔开ansible all -m yun -a ‘list=instealled’ 安装过的列表 ‘name=vsftpd state=removed’卸载‘name=vsftpd state=absent’ ‘rpm -q vsftpd’ 查找是否卸载 安装下载好的软件；ansible all -m copy -a ‘src=/data/softname dest=/root/‘ansible all -a ‘ls /root/‘ansbile all -m yum -a ‘name=/root/softname’ disable_gpg_check=yes 忽略，禁用 ‘name=dstat update_cache=yes’ 更新缓存 services: ansible all -m services -a ‘name=vsftpd state=started enabled=yes’启动服务，同时设为开机启动 user: ansible all -m user -a ‘name=nginx shell=/sbin/nologin system=yes home=/var/nginx groups=root,bin uid=80 comment=”nginx service”‘创建账号 ansible all -m user -a ‘name=nginx state=absent remove=yes’ 删除账号，删除home目录 group: ansible all -m group -a ‘name=nginx system=yes gid=80’ansible all -a ‘getent group nginx’ansible -m group -a ‘name=nginx state=absent’ 删除 ansible-galaxy: ansible-galaxy install geerlingguy.nginx yml/yaml:注意缩进，格式 --- -hosts:webserver remote_user:root tasks: -name:hello command：hostname ansible-playbook test.yaml ansible-vault:ansible-vault encrypt test.yaml 对文件进行加密，避免敏感信息泄露 需要设置加密口令,再次执行yaml时会报错， ansible-vault decrypt test.yaml 解密 ansible-vault view test.yaml 查看yaml需要输入口令 ansible-vault rekey test.yaml 修改密码 ansible-vault create test2.yaml 创建新的playbook文件 ansible-console: 交互式：ansible-console “root@all (3)[f:5]$ “ 并发数量为5也可以修改forks 10 cd 192.168.80.135 切换到135主机 hostname name=node2.magedu.com 修改主机名 playbookplaybook采用YAMl语言编写 1.# test yaml 注释2.缩进必须统一 --- - hosts:webserver remote_user:root tasks: - name:create new file #描述 file:name=/data/newfile state=touch 模块/命令 - name:create new user user: name=test2 - name: install httpd yum:name=httpd - name:copy conf copy:src=/etc/conf dest=/etc/conf - name:start service service:name=httpd state=started enables=yes ansible-playbook -C file.yml # -C 检查 ansible all -a ‘getent passwd test2’ #查看test2用户 ansible all -m shell -a ‘ss -tln | grep :80’ #查看80端口 ansible all -a ‘getent passwd test2’ –limit 192.168.80.134 ansibel-playbook file.yml –list ansibel-playbook file.yml –list-tasks - name:copy a file copy:src=files/test.py dest=/etc/test.py #files相对路径，相对于当前目录 注：文件修改后再次执行copy，不会生效 更新配置文件，执行playbook后，并不会生效 http.yml --- - hosts: webserver remote_user:root tasks: - name:install https package yum:name-httpd - name: copy conf file copy: src=files/httpd.conf dest=/etc/httpd/conf baskup=yes - name: start service service: name=httpd state=started enabled=yes 执行http.yml，修改配置文件后，执行不会重启 http.yml --- - hosts: webserver remote_user:root tasks: - name:install https package yum:name-httpd tag:inshttpd - name: copy conf file copy: src=files/httpd.conf dest=/etc/httpd/conf baskup=yes notify:restart service - name: start service service: name=httpd state=started enabled=yes tag:rshttpd handlers: - name: restart service service: name=http state=restarted 也可以同时触发两个任务 tags： 添加标签，可以单独执行标签多个动作共用一个标签 ansible-playbook -t rshttpd httpd.yml ansible-playbook -t inshttpd,rshttpd httpd.yml setup: ansible all -m setup -a ‘filter=ansible_hostname’ ansible all -m setup -a ‘filter=address‘\\ ansible all -m setup -a ‘filter=ansible_all_ipv4_address’ app.yml --- - hosts: webserver remote_user: root tasks: - name: install packing yum: name={{ pkname }} - name: start service service: name={{ pkname }} state=started enabled=yes ansible-playbook -e ‘pkname=httpd’ app.yml pkname 不会写死，灵活定义也可以同时装多个包，用逗号隔开 eg： --- - hosts:websever remote_user: root vars: - pkname1: httpd - pkname2: vsftpd tasks: - name:install pachage yum: name={{ pkname1 }} - name: install package yum: name={{ pkname2 }} 定义变量在playbook中， hostname.yml: --- - hosts: webserver rempte_user: root tasks: - name: set hostname hostname: name= www{{http_port}}.magedu.com hosts： [webserver:vars]nodenamw=wwwdomainname=magedu.com 此处的变量对webserver所有主机有效 tasks: - name: set hostname hostname：name={{nodename}}{{http_port}}.{{domasinname}} 命令行优先级高于配置文件 ansible all -m setupansible all -m setup -a ‘filter=”ansbile_fqdn”‘ var.yml --- - hosts:webserver renote_use: root tasks: - name: create a file file: name=/data/{{ ansible_fqdn }}.log state=touch mode=600 owner=wang ansible-playbook -c var.yml vars.yml var1: httpdvar2: vsftpd testvars.yml --- - hosts: webserver remote_user: root vars_file: - vars.yml tasks: - name：install package yum: name={{ var1 }} - name: create file file: name= /data/{{ var2 }}.log state=touch ## template.yml --- - hosts: webserver remote_user: root tasks: - name: install package tum: name=nginx - name: copy template template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf - name start service service: name=nginx state=started enabled=yes ansible all -m shell -a ‘ss -ntpl’ #查看端口 nginx.conf中修改: worker_processes NaN #cpu个数的2次方 修改template.yml --- - hosts: webserver remote_user: root tasks: - name: install package tum: name=nginx - name: copy template template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf notify: start service - name start service service: name=nginx state=started enabled=yes handlers: - name: restart service service: name=nginx state=restarted ansible all -m shell -a ‘ps aux | grep nginx’ #过滤nginx进程 hosts：也可以写成如下模式 [webserver]192.168.80.134 http_port=81192.168.80.135 http_port=82 ansible-playbook -e ‘http_port=99’ testtemp.yml #修改端口 优先级：命令行&gt;playbook&gt;主机清单 ansibel all -m setup -a ‘filte=ansible_os_family’ ‘filter=”distribution“‘ ######### testitem.yml --- - hosts: webserver remote_user: root tasks: - name: create some files file: name=/data/{{ item }} state=touch when: ansible_distribution_major_version == &quot;7&quot; with_items: - file1 - file2 - file3 - name: install spme package yum: name={{ item }} with_items: - htop - sl - hping3 ### create_group.yml --- - hosts: all remote_user: root tasks: - name: create some groups group: name={{ item }} when: ansible_distribution_major_version == &quot;7&quot; with_items: - g1 - g2 - g3 创建用户，并加入到组 --- - hosts: all remote_user: root tasks: - name: create some groups group: name={{ item }} when: ansible_distribution_major_version == &quot;7&quot; with_items: - g1 - g2 - g3 - name:create some users user: name={{item.name}} group={{item.group}} with_items: - { name: &apos;user1&apos;, group: &apos;g1&apos; } - { name: &apos;user2&apos;, group: &apos;g2&apos; } - { name: &apos;user3&apos;, group: &apos;g3&apos; } ########## for: testfor.yml --- - hosts: all remote_user: root vars: ports: - 81 - 82 - 83 tasks: - name: copy conf template: src=for1.conf.j2 dest=/data/for1.conf 创建文件：for1.conf.j2 {% for port in ports %} server{ listen {{ port }} } {% endfor %} 修改为字典模式： --- - hosts: all remote_user: root vars: ports: - listen_port:81 - listen_port:82 - listen_port:83 tasks: - name: copy conf template: src=for2.conf.j2 dest=/data/for1.conf for2.conf.j2 {% for port in ports %} server{ listen {{ port.listen_port }} } {% endfor %} --- - hosts: all remote_user: root vars: ports: - web1: port: 81 name: web1.magedu.com rootdir: /data/website1 - web2: port: 83 name: web2.magedu.com rootdir: /data/website2 - web3: port: 83 name: web3.magedu.com rootdir: /data/website3 tasks: - name: copy conf template: src=for3.conf.j2 dest=/data/for1.conf for3.conf.j22 {% for p in ports %} server{ listen {{ p.port }} servername {{ p.name }} documentroot {{ p.rootdir }} } {% endfor %} --- - hosts: all remote_user: root vars: ports: - web1: port: 81 #name: web1.magedu.com rootdir: /data/website1 - web2: port: 83 name: web2.magedu.com rootdir: /data/website2 - web3: port: 83 #name: web3.magedu.com rootdir: /data/website3 tasks: - name: copy conf template: src=for4.conf.j2 dest=/data/for4.conf for4.conf.j22 {% for p in ports %} server{ listen {{ p.port }} {% if p.name is defined %} servername {{ p.name }} {% endif %} documentroot {{ p.rootdir }} } {% endfor %} roles创建roles文件夹： mkdir rolesmkdir roles/{httpd, mysql, memcache} -pv mkdir roles/nginx ansible all -m shell -a ‘rpm -q nginx’ ‘getent group nginx’‘userdel -f nginx’ 删除用户，组 cd nginxmkdir tasks templates cd tasksvim group.yml - name:create group group: name=nginx gid=80 vim user.yml - name: create user user: name=nginx group=nginx system=yes shell=/sbin/nologin uid=80 vim yum.yml - name: install package yum: name=nginx vim start.yml - name: start service service: name=nginx state=started enabled=yes vim restart.yml - name: restart service sservice: name=nginx state=restarted templates: nginx.conf.j2(nginx.conf重命名为此) vim temp.yml - name: copy conf template: src=nginx.conf.j2 dest=/etc/ngiunx/nginx.conf vim main.yml - include: group.yml - include: user.yml - include: yum.yml - include: temp.yml - include: start.yml 调用的剧本与roles同级 vim nginx_role.yml - hosts: all remote_usr: root roles: - role: nginx ansibel-playbook -c nginx_role.yml httpd_roles mkdir tasks vim user.yml - name: create user user: name=apache system=yes shell=/sbin/nologin vim copyfile.yml - name: copy file file: src= dest= httpd： tasks： vim user.yml - name: create user user: name=apache system=yes shell=/sbin/nologin vim copyfile.yml - name: copy file copy: src=httpd.conf dest=/data/ vim main.yml - include: user.yml - include: copyfile.yml vim httpd_role.yml - hosts: all remote_user: root roles: - role: httpd 在一个角色中，调用另一个角色 vim some_role.yml - hosts: all remote_user：root roles: - role: http - role: nginx 一个角色引用另一个角色中的任务在main.yml中添加一行 - include: roles/httpd/tasks/copyfileyml 此处需要注意路径的选择 ansible.cfg 当playbook失败的情况下，一个重试文件将会创建，后缀为retry，默认开启此功能 添加标签：some_role.yml --- - hosts: all remote_user: root roles: - { role: httpd, tags:[&apos;web&apos;, &apos;httpd&apos;] } #即属于web，也属于httpd - { role: nginx, tags:[&apos;web&apos;, &apos;nginx&apos;] } ansible-playbook -t web some_role.yml #只执行标签web some_role.yml --- - hosts: all remote_user: root roles: - { role: httpd, tags:[&apos;web&apos;, &apos;httpd&apos;] } #即属于web，也属于httpd - { role: nginx, tags:[&apos;web&apos;, &apos;nginx&apos;] , when: ansible_distribution_major_version == &apos;7&apos;} # 当版本为7的时候执行 mkdir appcd appmkdir tasks templates vars handlers files task: vim group.yml - name: create group group: name=app system=yes gid=123 vim user.yml - name: create user user: name=app group=app system=yes shell=/sbin/nologin uid=1223 vim yum.yml - name: isntall package yum: name=httpd vim templ.yml - name: copy conf template: src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf notify: restart service vars:main.yml username:app groupname: app handlers:vim main.yml - name: restart service service: name=httpd state=restarted tasks: vim start.yml - name: start service service: name=httpd state=started enabled=yes vim copyfile.yml - name: copy config copy: src=vhosts.conf dest=/etc/httpd/conf.d/ owner=app vim main.yml - include: group.yml - include: user.yml - include: yum.yml - include: templ.yml - include: copyfile.yml - include: start.yml files:touch vhosts.conf app_role.yml - hosts: all remote_user: root roles: - app memcached: yum install memcached cat /etc/sysconfig/memcached cp /etc/sysconfig/memcached templates/memcached.j2修改：CACHESIZE=”NaN“ vim tasks/yum.yml - name: install package yum: name=memcached vim taska/start.yml - name: start service service: name=memcached state=started enabled=yes vim /tasks/templ.yml - name: copy conf templates: src=memcached.j2 dest=/etc/sysconfig/memcached vim tasks/main.yml - include: yum.yml - include: templ.yml - include: start.yml vim memcached_role.yml - hosts: all remote_user: root roles: - memcached ansible-playbook -C memecached_role.ymlansible-playbook memcached_role.yml","categories":[{"name":"ansible","slug":"ansible","permalink":"http://www.baidu.com/categories/ansible/"}],"tags":[{"name":"ansible hello","slug":"ansible-hello","permalink":"http://www.baidu.com/tags/ansible-hello/"}],"author":"yuangeng"}]}